<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- 빈 등록 -->
	<!-- 일단 이번에는 Programmer 객체만 만들거니까 Ssafy는 등록하지 말아보고 -->
	<!-- 객체 생성할 예정인 클래스들만 등록해보자 -->
	<bean class="com.ssafy.aop.Programmer" id="programmer"></bean>
	<bean class="com.ssafy.aop.MyAspect" id="myAspect"></bean>
	
	<!-- aop 설정, 우리는 programmer.coding()을 호출하면 myAspect.coding()이 호출되도록 할거야 -->
	<!-- <aop:config>
		execution(myAspect의 모든 메서드를 실행했을 때), id는 해당 Point Cut의 이름
		<aop:pointcut expression="execution(* *(..))" id="mypt"/> 
		<aop:aspect ref="myAspect"> Bean으로 등록한 myAspect를 사용하겠다고 이렇게 참조하면
		이 아래 자동완성으로 myAspect 안의 메서드들이 촤라락 뜸
			 
			method 안에는 메서드명을 작성, "mypt" 때 실행하겠어
			aop:before는 target 메서드 이전에 실행하겠다는 의미
			<aop:before method="before" pointcut-ref="mypt"/>
			
			after-returing 메서드는 반환값이 있으므로 returning을 작성
			<aop:after-returning method="afterReturning" pointcut-ref="mypt" returning="num"/>
			
			after-throwing 메서드는 throwing 되는 객체가 있으므로 throwing 작성
			<aop:after-throwing method="afterThrowing" pointcut-ref="mypt" throwing="th"/>
			
			<aop:after method="after" pointcut-ref="mypt"/>
		</aop:aspect>
	</aop:config> -->
	
	<!-- 위처럼 따로 따로 처리하지 말고 around로 한 번에 처리해보자 -->
	<aop:config>
		<aop:pointcut expression="execution(* *(..))" id="mypt"/> 
		<aop:aspect ref="myAspect">
			<aop:around method="around" pointcut-ref="mypt"/>
		</aop:aspect>
	</aop:config>

</beans>