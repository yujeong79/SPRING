<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">


	<!-- 빈 등록 -->                    
	<bean id='targetClass' class='com.ssafy.ws.TargetClass'/>
    <bean id='adviceClass' class='com.ssafy.ws.AdviceClass'/>
    

    <!--
        Advice
        Target의 메소드가 실행되기 전, 후 또는 예외가 발생했을 때 실행되는 코드를 말한다.
        Advice의 종류
        - Before : Target의 메소드가 실행되기 전에 실행되는 코드
        - After : Target의 메소드가 실행된 후에 실행되는 코드
        - Around : Target의 메소드가 실행되기 전, 후에 실행되는 코드
        - After Returning : Target의 메소드가 성공적으로 실행된 후에 실행되는 코드
        - After Throwing: Target의 메소드가 예외를 던진 후에 실행되는 코드
        
        Pointcut
        Target의 어떤 메소드에 Advice를 적용할지 결정하는 것을 말한다.
        Pointcut 지시자
        - execution: 메소드 실행 시점에 Advice를 적용한다.
          - 사용 : execution([접근제어자] [리턴타입] [패키지명] [클래스명] [메소드명]([파라미터]) [throws 예외])
            ex) execution(* com.ssafy.ws.TargetClass.*(..))  : com.ssafy.ws.TargetClass의 모든 메소드에 Advice를 적용한다.
          - * : 모든 값을 의미한다. (모든 리턴타입, 모든 메소드명, 모든 파라미터, ...)
          - .. : 0개 이상의 인자를 의미한다.
        - within: 특정 클래스나 패키지 내의 모든 메소드에 Advice를 적용한다.
        - bean: 특정 빈에만 Advice를 적용한다.
        - this: 특정 인터페이스를 구현한 빈에만 Advice를 적용한다.
        - target: 프록시 대상 객체의 자바 타입을 기준으로 메서
        - args: 특정 인자를 받는 메소드에만 Advice를 적용한다.
        - @annotation: 특정 어노테이션이 붙은 메소드에만 Advice를 적용한다.
    -->
        <!-- AOP 설정 -->
	<aop:config>
        <!-- 
            <aop:aspect> : Aspect 정의하는 태그. id 속성은 Aspect의 이름을 지정하고 ref 속성은 Aspect를 담고 있는 빈의 이름을 지정한다.
            <aop:pointcut> : Pointcut을 정의하는 태그. id 속성은 Pointcut의 이름을 지정하고 expression 속성은 Pointcut을 지정하는 표현식을 지정한다.
            <aop:around>, <aop:before>, <aop:after>, ... : Advice를 정의하는 태그. method 속성은 Advice 메소드 이름을 지정하고 pointcut-ref 속성은 적용할 Pointcut의 이름을 지정한다.
        -->
        <!-- Q1. com.ssafy.ws.TargetClass의 모든 메소드의 실행 전, 후에 AdviceClass의 aroundMethod 메소드를 실행한다. -->
        <aop:aspect id="myAspect1" ref="adviceClass">
            <aop:pointcut id="businessMethods1" expression="execution(* *())"/>
            <aop:around method="aroundMethod" pointcut-ref="businessMethods1"/>
        </aop:aspect>
        
        <!-- Q2. com.ssafy.ws 패키지 내의 모든 클래스의 모든 메소드 실행 전에 AdviceClass의 beforeMethod 메소드를 실행한다. -->
        <aop:aspect id="myAspect2" ref="adviceClass">
            <aop:pointcut id="businessMethods2" expression="execution(* *())"/>
            <aop:before method="beforeMethod" pointcut-ref="businessMethods2"/>
        </aop:aspect>
        
        <!-- Q3. com.ssafy.ws.TargetClass의 method2 메소드의 실행 후에 AdviceClass의 afterMethod 메소드를 실행한다. -->
        <aop:aspect id="myAspect3" ref="adviceClass">
            <aop:pointcut id="businessMethods3" expression="execution(* com.ssafy.ws.TargetClass.method2())"/>
            <aop:after method="afterMethod" pointcut-ref="businessMethods3"/>
        </aop:aspect>
        
        <!-- Q4. 반환 타입이 String인 모든 메소드가 정상적으로 실행된 후에 AdviceClass의 afterReturningMethod 메소드를 실행한다. -->
        <aop:aspect id="myAspect4" ref="adviceClass">
            <aop:pointcut id="businessMethods4" expression="execution(String *())"/>
            <aop:after-returning method="afterReturningMethod" pointcut-ref="businessMethods4" returning="result"/>
        </aop:aspect>
        
        <!-- Q5.  RuntimeException 예외를 던지는 모든 메소드가 예외가 발생한 후에 AdviceClass의 afterThrowingMethod 메소드를 실행한다. -->
        <aop:aspect id="myAspect5" ref="adviceClass">
            <aop:pointcut id="businessMethods5" expression="execution(* *() throws java.lang.RuntimeException)"/>
            <aop:after-throwing method="afterThrowingMethod" pointcut-ref="businessMethods5" throwing="ex"/>
        </aop:aspect>
        
	</aop:config>
</beans>